#!/usr/bin/env perl

use strict;
use warnings;
use Data::Random::String::Matches;

=head1 NAME

cookbook.pl - Examples and recipes for Data::Random::String::Matches

=head1 DESCRIPTION

This file contains practical examples and common patterns for generating
random strings with Data::Random::String::Matches.

=head1 USAGE

Run this script to see examples of various patterns:

	perl bin/cookbook

Or use individual patterns in your own code:

	use Data::Random::String::Matches;
	
	# Pick any pattern from above
	my $gen = Data::Random::String::Matches->new(qr/[A-Z]{3}\d{4}/);
	my $result = $gen->generate();

=head1 COMMON USE CASES

=head2 Testing

Generate test data for:
- Email addresses
- Phone numbers
- Credit cards (test numbers only!)
- User IDs
- API keys

=head2 Development

Create realistic mock data for:
- Database seeding
- API responses
- UI prototypes
- Performance testing

=head2 Security

Generate:
- Temporary passwords
- Session tokens
- One-time codes
- Recovery codes

=cut

print "=" x 70, "\n";
print "Data::Random::String::Matches - Cookbook\n";
print "=" x 70, "\n\n";

# ============================================================================
# SECTION 1: Basic Patterns
# ============================================================================

print "SECTION 1: Basic Patterns\n";
print "-" x 70, "\n\n";

# Example 1.1: Simple PIN codes
print "1.1 Four-digit PIN:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{4}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 1.2: Six-digit verification code
print "1.2 Six-digit verification code:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{6}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 1.3: Alphanumeric codes
print "1.3 Alphanumeric confirmation codes (8 characters):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Z0-9]{8}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# ============================================================================
# SECTION 2: Identifiers and Keys
# ============================================================================

print "SECTION 2: Identifiers and Keys\n";
print "-" x 70, "\n\n";

# Example 2.1: Google API keys
print "2.1 Google-style API keys:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/AIza[0-9A-Za-z_-]{35}/);
	print "  ", $gen->generate(), "\n" for (1..2);
}
print "\n";

# Example 2.2: UUID v4 format
print "2.2 UUID v4 format:\n";
{
	my $gen = Data::Random::String::Matches->new(
		qr/[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/
	);
	print "  ", $gen->generate(), "\n" for (1..2);
}
print "\n";

# Example 2.3: Short hash-like identifiers
print "2.3 Git-style short hashes:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[0-9a-f]{7}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 2.4: Database primary keys
print "2.4 Database-style IDs:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Z]{3}\d{10}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 2.5: Session tokens
print "2.5 Session tokens (32 characters):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Za-z0-9]{32}/);
	print "  ", $gen->generate(), "\n" for (1..2);
}
print "\n";

# ============================================================================
# SECTION 3: Contact Information
# ============================================================================

print "SECTION 3: Contact Information\n";
print "-" x 70, "\n\n";

# Example 3.1: US Phone numbers
print "3.1 US Phone numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{3}-\d{3}-\d{4}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 3.2: International format
print "3.2 International phone format:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\+1-\d{3}-\d{3}-\d{4}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 3.3: Email addresses
print "3.3 Simple email addresses:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[a-z]{5,10}@[a-z]{5,10}\.com/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 3.4: Email with common domains
print "3.4 Email with common domains:\n";
{
	my $gen = Data::Random::String::Matches->new(
		qr/[a-z]{5,10}@(gmail|yahoo|hotmail|outlook)\.com/
	);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 3.5: US ZIP codes
print "3.5 US ZIP codes:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{5}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 3.6: ZIP+4 format
print "3.6 ZIP+4 format:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{5}-\d{4}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# ============================================================================
# SECTION 4: Financial and Payment
# ============================================================================

print "SECTION 4: Financial and Payment\n";
print "-" x 70, "\n\n";

# Example 4.1: Credit card numbers (Visa)
print "4.1 Test credit card numbers (Visa format):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/4\d{15}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 4.2: Credit card with dashes
print "4.2 Credit card with formatting:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{4}-\d{4}-\d{4}-\d{4}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 4.3: CVV codes
print "4.3 CVV codes:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{3}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 4.4: Bank account numbers
print "4.4 Bank account numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{10,12}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 4.5: Transaction IDs
print "4.5 Transaction IDs:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/TXN[A-Z0-9]{12}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# ============================================================================
# SECTION 5: Passwords and Security
# ============================================================================

print "SECTION 5: Passwords and Security\n";
print "-" x 70, "\n\n";

# Example 5.1: Simple passwords
print "5.1 Alphanumeric passwords (12 characters):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Za-z0-9]{12}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 5.2: Passwords with special characters
print "5.2 Strong passwords with special characters (16 characters):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Za-z0-9!@#$%^&*]{16}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 5.3: Passphrases
print "5.3 Random passphrases (word-like):\n";
{
	my $gen = Data::Random::String::Matches->new(
		qr/[a-z]{4,8}-[a-z]{4,8}-[a-z]{4,8}/
	);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 5.4: Temporary passwords
print "5.4 Temporary passwords (mixed case, 8 chars):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Z][a-z]{3}\d{4}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 5.5: Recovery codes
print "5.5 Recovery codes:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# ============================================================================
# SECTION 6: Vehicle and Transportation
# ============================================================================

print "SECTION 6: Vehicle and Transportation\n";
print "-" x 70, "\n\n";

# Example 6.1: US License plates
print "6.1 US License plate format:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Z]{3}\d{4}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 6.2: VIN-like numbers
print "6.2 VIN-style identifiers (simplified):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-HJ-NPR-Z0-9]{17}/);
	print "  ", $gen->generate(), "\n" for (1..2);
}
print "\n";

# Example 6.3: Flight numbers
print "6.3 Flight numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/(AA|UA|DL|SW)\d{3,4}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 6.4: Tracking numbers
print "6.4 Package tracking numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/1Z[A-Z0-9]{16}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# ============================================================================
# SECTION 7: Codes and References
# ============================================================================

print "SECTION 7: Codes and References\n";
print "-" x 70, "\n\n";

# Example 7.1: Order numbers
print "7.1 Order numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/ORD-\d{8}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 7.2: Invoice numbers
print "7.2 Invoice numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/INV-\d{4}-[A-Z]{3}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 7.3: Coupon codes
print "7.3 Promotional coupon codes:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/(SAVE|DEAL|SALE)\d{2}[A-Z]{3}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 7.4: Product SKUs
print "7.4 Product SKUs:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Z]{2}-\d{4}-[A-Z]{2}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 7.5: Serial numbers
print "7.5 Serial numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/SN[A-Z0-9]{10}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# ============================================================================
# SECTION 8: Web and URLs
# ============================================================================

print "SECTION 8: Web and URLs\n";
print "-" x 70, "\n\n";

# Example 8.1: Subdomains
print "8.1 Random subdomains:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[a-z]{5,10}\.example\.com/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 8.2: Short URLs
print "8.2 Short URL codes:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[A-Za-z0-9]{6}/);
	print "  https://short.url/", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 8.3: Usernames
print "8.3 Usernames:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[a-z]{3,8}\d{2,4}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 8.4: Slugs
print "8.4 URL slugs:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/[a-z]{4,8}-[a-z]{4,8}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# ============================================================================
# SECTION 9: Healthcare and Medical
# ============================================================================

print "SECTION 9: Healthcare and Medical\n";
print "-" x 70, "\n\n";

# Example 9.1: Patient IDs
print "9.1 Patient ID numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/P\d{7}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 9.2: Medical Record Numbers
print "9.2 Medical record numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/MRN-\d{6}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 9.3: Prescription numbers
print "9.3 Prescription numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/RX\d{10}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# ============================================================================
# SECTION 10: Advanced Patterns
# ============================================================================

print "SECTION 10: Advanced Patterns\n";
print "-" x 70, "\n\n";

# Example 10.1: Backreferences
print "10.1 Patterns with repetition (backreferences):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/(\w{4})-\1/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 10.2: Multiple backreferences
print "10.2 Multiple repeated sections:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/(\d{2})-(\w{3})-\1-\2/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 10.3: Nested groups
print "10.3 Nested groups with quantifiers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/((foo|bar)\d{2}){2}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 10.4: Complex alternation
print "10.4 Complex alternation patterns:\n";
{
	my $gen = Data::Random::String::Matches->new(
		qr/(red|green|blue)-(small|medium|large)/
	);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 10.5: IPv4 addresses (simplified)
print "10.5 IPv4-style addresses:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 10.6: MAC addresses
print "10.6 MAC addresses:\n";
{
	my $gen = Data::Random::String::Matches->new(
		qr/[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}/
	);
	print "  ", $gen->generate(), "\n" for (1..3);
}
print "\n";

# Example 10.7: Version numbers
print "10.7 Semantic version numbers:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/\d{1,2}\.\d{1,2}\.\d{1,3}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 10.8: Dates (YYYY-MM-DD format, simplified)
print "10.8 Date format (YYYY-MM-DD, simplified):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/20\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 10.9: Times (HH:MM format)
print "10.9 Time format (HH:MM):\n";
{
	my $gen = Data::Random::String::Matches->new(qr/([01]\d|2[0-3]):[0-5]\d/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

# Example 10.10: Hex color codes
print "10.10 Hex color codes:\n";
{
	my $gen = Data::Random::String::Matches->new(qr/#[0-9A-F]{6}/);
	print "  ", $gen->generate(), "\n" for (1..5);
}
print "\n";

print '=' x 70, "\n";
print "End of Cookbook\n";
print '=' x 70, "\n";

__END__

=head1 SEE ALSO

L<Data::Random::String::Matches>

=cut
